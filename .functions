#!/usr/bin/env bash

# Create a new directory and enter it.
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location.
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Determine size of a file or total size of a directory.
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Start an HTTP server from a directory, optionally specifying the port.
function server() {
	local port="${1:-8000}";
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.DS_Store|.git|node_modules|.Trash|temp' --dirsfirst "$@" | less -FRX;
}

# Recursively replace old string with new string
# in all files of current directory (except in ./.git directory).
# First argument - old string, second argument - new string.
function recreplace() {
	grep -lR --exclude-dir .git "$1" . | xargs sed -i "" "s|$1|$2|g"
}

# Run `dig` and display the most useful info.
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# Check, which size have an every single package
# (https://hackernoon.com/a-story-of-a-fat-go-binary-20edc6549b97#.8m9dqk149).
function gofatty() {
	eval `go build -work -a 2>&1` && find $WORK -type f -name "*.a" | xargs -I{} du -hxs "{}" | gsort -rh | sed -e s:${WORK}/::g
}

# Open FZF and cd chosen directory.
function cf() {
  local path="$(tree -dfi | fzf)";
  if [ "$path" != "" ]; then
    cd "$path";
  fi
}

# Open FZF and open chosen file in vim.
function vf() {
  local path="$(fzf)";
  if [ "$path" != "" ]; then
    vim "$path";
  fi
}
